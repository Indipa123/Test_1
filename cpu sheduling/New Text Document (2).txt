#include <iostream>
#include <sys/types.h>
#include <unistd.h>
#include <sys/wait.h>
#include <vector>
#include <algorithm>

using namespace std;

// Function to check if a number is prime
bool isPrime(int num) {
    if (num <= 1) return false;
    for (int i = 2; i <= num / 2; i++) {
        if (num % i == 0) return false;
    }
    return true;
}

int main() {
    int arr[10];
    cout << "Enter 10 integers for the array: ";
    for (int i = 0; i < 10; i++) {
        cin >> arr[i];
    }

    pid_t pid;
    for (int i = 0; i < 8; i++) {
        pid = fork();

        if (pid == 0) { // Child process
            switch (i) {
                case 0: { // Parent process: Display all elements
                    cout << "Parent process: Array elements are: ";
                    for (int j = 0; j < 10; j++) {
                        cout << arr[j] << " ";
                    }
                    cout << endl;
                    break;
                }
                case 1: { // 1st child process: Sum of all numbers
                    int sum = 0;
                    for (int j = 0; j < 10; j++) sum += arr[j];
                    cout << "1st child process: Sum of all numbers = " << sum << endl;
                    break;
                }
                case 2: { // 2nd child process: Sum of even numbers
                    int sumEven = 0;
                    for (int j = 0; j < 10; j++) {
                        if (arr[j] % 2 == 0) sumEven += arr[j];
                    }
                    cout << "2nd child process: Sum of even numbers = " << sumEven << endl;
                    break;
                }
                case 3: { // 3rd child process: Sum of odd numbers
                    int sumOdd = 0;
                    for (int j = 0; j < 10; j++) {
                        if (arr[j] % 2 != 0) sumOdd += arr[j];
                    }
                    cout << "3rd child process: Sum of odd numbers = " << sumOdd << endl;
                    break;
                }
                case 4: { // 4th child process: Sum of prime numbers
                    int sumPrime = 0;
                    for (int j = 0; j < 10; j++) {
                        if (isPrime(arr[j])) sumPrime += arr[j];
                    }
                    cout << "4th child process: Sum of prime numbers = " << sumPrime << endl;
                    break;
                }
                case 5: { // 5th child process: Sort array in ascending order
                    vector<int> sortedArr(arr, arr + 10);
                    sort(sortedArr.begin(), sortedArr.end());
                    cout << "5th child process: Array in ascending order: ";
                    for (int num : sortedArr) cout << num << " ";
                    cout << endl;
                    break;
                }
                case 6: { // 6th child process: Find maximum number
                    int maxNum = arr[0];
                    for (int j = 1; j < 10; j++) {
                        if (arr[j] > maxNum) maxNum = arr[j];
                    }
                    cout << "6th child process: Maximum number = " << maxNum << endl;
                    break;
                }
                case 7: { // 7th child process: Search for a number
                    int searchNum;
                    cout << "7th child process: Enter a number to search: ";
                    cin >> searchNum;
                    bool found = false;
                    for (int j = 0; j < 10; j++) {
                        if (arr[j] == searchNum) {
                            found = true;
                            break;
                        }
                    }
                    if (found) {
                        cout << "7th child process: Number " << searchNum << " found in the array." << endl;
                    } else {
                        cout << "7th child process: Number " << searchNum << " not found in the array." << endl;
                    }
                    break;
                }
            }
            exit(0);
        } else if (pid > 0) { // Parent process
            wait(NULL); // Wait for the child process to complete
        } else {
            cerr << "Fork failed!" << endl;
            return 1;
        }
    }

    return 0;
}