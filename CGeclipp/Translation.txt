import javax.swing.*;
import java.awt.*;

public class Translation extends JPanel {

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g); // Ensures proper rendering

        int[] x = {0, 200, 200, 0}; // X-coordinates
        int[] y = {0, 0, 200, 200}; // Y-coordinates
        // Original square
        g.setColor(Color.BLUE);
        ddaLine(x[0], y[0], x[1], y[1], g);
        ddaLine(x[1], y[1], x[2], y[2], g);
        ddaLine(x[2], y[2], x[3], y[3], g);
        ddaLine(x[3], y[3], x[0], y[0], g);

        // Translated square
        
        translate(x, y, 250, 250); // Translate by (20, 20)

        g.setColor(Color.RED);
        ddaLine(x[0], y[0], x[1], y[1], g);
        ddaLine(x[1], y[1], x[2], y[2], g);
        ddaLine(x[2], y[2], x[3], y[3], g);
        ddaLine(x[3], y[3], x[0], y[0], g);
    }

    public void ddaLine(int x1, int y1, int x2, int y2, Graphics g) {
        int dx = x2 - x1;
        int dy = y2 - y1;

        int steps = Math.max(Math.abs(dx), Math.abs(dy));

        float Xinc = (float) dx / steps;
        float Yinc = (float) dy / steps;

        float x = x1;
        float y = y1;

        for (int i = 0; i <= steps; i++) {
            g.fillRect(Math.round(x), Math.round(y), 1, 1);
            x += Xinc;
            y += Yinc;
        }
    }

    public void translate(int x[], int y[], int tx, int ty) {
        for (int i = 0; i < x.length; i++) {
            x[i] += tx;
            y[i] += ty;
        }
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("Translation Example");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(600, 600);
        frame.add(new Translation());
        frame.setVisible(true);
    }
}

===============

package first;
import javax.swing.*;
import java.awt.*;

public class HouseTranslation extends JPanel {

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        // Define original shapes
        int[][] base = {{100, 300}, {300, 300}, {300, 500}, {100, 500}, {100, 300}};
        int[][] roof = {{100, 300}, {200, 200}, {300, 300}};
        int[][] door = {{170, 500}, {170, 420}, {230, 420}, {230, 500}, {170, 500}};
        int[] circleCenter = {200, 350}; // window
        int radius = 20;

        // Draw original house in blue
        g.setColor(Color.BLUE);
        drawPolygon(base, g);
        drawPolygon(roof, g);
        drawPolygon(door, g);
        drawCircle(circleCenter[0], circleCenter[1], radius, g);

        // Apply translation
        translate(base, 250, 200);
        translate(roof, 250, 200);
        translate(door, 250, 200);
        circleCenter[0] += 250;
        circleCenter[1] += 200;

        // Draw translated house in red
        g.setColor(Color.RED);
        drawPolygon(base, g);
        drawPolygon(roof, g);
        drawPolygon(door, g);
        drawCircle(circleCenter[0], circleCenter[1], radius, g);
    }

    // DDA Line Drawing Algorithm using drawLine
    private void ddaLine(int x1, int y1, int x2, int y2, Graphics g) {
        int dx = x2 - x1;
        int dy = y2 - y1;
        int steps = Math.max(Math.abs(dx), Math.abs(dy));
        float x = x1, y = y1;
        float xInc = (float) dx / steps;
        float yInc = (float) dy / steps;

        for (int i = 0; i <= steps; i++) {
            g.drawLine(Math.round(x), Math.round(y), Math.round(x), Math.round(y));
            x += xInc;
            y += yInc;
        }
    }

    // Draw polygon using DDA
    private void drawPolygon(int[][] points, Graphics g) {
        for (int i = 0; i < points.length - 1; i++) {
            ddaLine(points[i][0], points[i][1], points[i + 1][0], points[i + 1][1], g);
        }
    }

    // Midpoint Circle Drawing Algorithm using drawLine
    private void drawCircle(int xc, int yc, int r, Graphics g) {
        int x = 0, y = r;
        int d = 1 - r;

        while (x <= y) {
            plotCirclePoints(xc, yc, x, y, g);
            x++;
            if (d < 0) {
                d += 2 * x + 1;
            } else {
                y--;
                d += 2 * (x - y) + 1;
            }
        }
    }

    private void plotCirclePoints(int xc, int yc, int x, int y, Graphics g) {
        // Draw 8 symmetric points using drawLine
        g.drawLine(xc + x, yc + y, xc + x, yc + y);
        g.drawLine(xc - x, yc + y, xc - x, yc + y);
        g.drawLine(xc + x, yc - y, xc + x, yc - y);
        g.drawLine(xc - x, yc - y, xc - x, yc - y);
        g.drawLine(xc + y, yc + x, xc + y, yc + x);
        g.drawLine(xc - y, yc + x, xc - y, yc + x);
        g.drawLine(xc + y, yc - x, xc + y, yc - x);
        g.drawLine(xc - y, yc - x, xc - y, yc - x);
    }

    // Translate polygon coordinates
    private void translate(int[][] shape, int tx, int ty) {
        for (int i = 0; i < shape.length; i++) {
            shape[i][0] += tx;
            shape[i][1] += ty;
        }
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("2D House Translation - No fillRect");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(800, 800);
        frame.add(new HouseTranslation());
        frame.setVisible(true);
    }
}

=================

package first;
import javax.swing.*;
import java.awt.*;

public class ShapeTranslation extends JPanel {
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        
        // Define the original house structure using coordinate arrays
        int[][] houseBase = {{100, 300}, {300, 300}, {300, 500}, {100, 500}, {100, 300}}; // Base of the house
        int[][] roof = {{100, 300}, {200, 200}, {300, 300}}; // Roof of the house
        int[][] door = {{180, 500}, {220, 500}, {220, 400}, {180, 400}, {180, 500}}; // Door
        
        // Draw original house in blue
        g.setColor(Color.BLUE);
        drawPolygon(houseBase, g);
        drawPolygon(roof, g);
        drawPolygon(door, g);
        
        // Translate and draw translated house in red
        translate(houseBase, 250, 200);
        translate(roof, 250, 200);
        translate(door, 250, 200);
        
        g.setColor(Color.RED);
        drawPolygon(houseBase, g);
        drawPolygon(roof, g);
        drawPolygon(door, g);
    }

    // Helper method to draw a polygon using DDA Line Algorithm
    private void drawPolygon(int[][] shape, Graphics g) {
        for (int i = 0; i < shape.length - 1; i++) {
            ddaLine(shape[i][0], shape[i][1], shape[i + 1][0], shape[i + 1][1], g);
        }
    }

    // DDA Line Drawing Algorithm
    private void ddaLine(int x1, int y1, int x2, int y2, Graphics g) {
        int dx = x2 - x1;
        int dy = y2 - y1;
        int steps = Math.max(Math.abs(dx), Math.abs(dy));
        float Xinc = (float) dx / steps;
        float Yinc = (float) dy / steps;
        float x = x1;
        float y = y1;
        for (int i = 0; i <= steps; i++) {
            g.fillRect(Math.round(x), Math.round(y), 2, 2);
            x += Xinc;
            y += Yinc;
        }
    }

    // Translation function
    private void translate(int[][] shape, int tx, int ty) {
        for (int i = 0; i < shape.length; i++) {
            shape[i][0] += tx;
            shape[i][1] += ty;
        }
    }

    // Main method to run the program
    public static void main(String[] args) {
        JFrame frame = new JFrame("Shape Translation Example");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(600, 600);
        frame.add(new ShapeTranslation());
        frame.setVisible(true);
    }
}

